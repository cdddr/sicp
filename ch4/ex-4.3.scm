;;; Convert eval to a data-directed style.
;; (define (eval exp env)
;;   (cond ((self-evaluating? exp) exp)
;;         ((variable? exp) (lookup-variable-value exp env))
;;         ((quoted? exp) (text-of-quotation exp))
;;         ((assignment? exp) (eval-assignment exp env))
;;         ((definition? exp) (eval-definition exp env))
;;         ((if? exp) (eval-if exp env))
;;         ((lambda? exp)
;;          (make-procedure (lambda-paramters exp)
;;                          (lambda-body exp)
;;                          env))
;;         ((begin? exp)
;;          (eval-sequence (begin-actions exp) env))
;;         ((cond? exp) (eval (cond->if exp) env))
;;         ((application? exp)
;;          (apply (eval (operator exp) env)
;;                 (list-of-values (operands exp) env)))
;;         (else
;;          (error "Unknown expression type -- EVAL" exp))))
;;; Store any actions where the action is in the `car' position in the eval-op-table.
;;; The function stored in the lookup function takes two arguments : exp and env.
(define eval-op-table (make-hash))
(define (get-eval action)
  (if (hash-has-key? eval-op-table action)
      (hash-ref eval-op-table action)
      #f))
(define (put-eval action func)
  (hash-set! eval-op-table action func))

;;; Data-Directed Dispatches
(put-eval 'quote (lambda (exp env)
                   (text-of-quotation exp)))
(put-eval 'set! eval-assignment)
(put-eval 'define eval-definition)
(put-eval 'if eval-if)
(put-eval 'lambda (lambda (exp env)
                    (make-procedure (lambda-parameters exp)
                                    (lambda-body exp)
                                    env)))
(put-eval 'begin (lambda (exp env)
                   (eval-sequence (begin-actions exp) env)))
(put-eval 'cond (lambda (exp env)
                  (eval (cond->if exp) env)))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        (else
         (let ((action (car exp)))
           (let ((action-func (get-eval action)))
             (cond (action-func (action-func exp env))
                   ((application? exp)
                    (apply (eval (operator exp) env)
                           (list-of-values (operands exp) env)))
                   (else
                    (error "EVAL -- Unrecognized expression passed to the evaluator."))))))))
